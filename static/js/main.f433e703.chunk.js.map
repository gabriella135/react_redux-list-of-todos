{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodos","visibleTodos","dispatch","completed","title","search","toLowerCase","includes","trim","length","className","map","id","classNames","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","value","placeholder","e","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","loadUser","href","App","isSelected","loadTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f433e703.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'query/SET',\n  payload: string,\n};\n\ntype SetStatusAction = {\n  type: 'status/SET',\n  payload: Status,\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'status/SET',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype Action = SetQueryAction | SetStatusAction;\ntype State = { query: string, status: Status };\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...state, query: action.payload };\n\n    case 'status/SET':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todo/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todo/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Todos = Todo[] | [];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  todos: Todos = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todo/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nfunction searchTitle(title: string, search: string) {\n  return title.toLowerCase().includes(search.trim().toLowerCase());\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  let selectedTodos: Todo[];\n  let visibleTodos: Todo[];\n\n  switch (filter.status) {\n    case 'active':\n      selectedTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case 'completed':\n      selectedTodos = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      selectedTodos = todos;\n      break;\n  }\n\n  if (filter.query) {\n    visibleTodos = selectedTodos.filter(todo => searchTitle(todo.title, filter.query));\n  } else {\n    visibleTodos = selectedTodos;\n  }\n\n  return (\n    <>\n      {!visibleTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map((todo) => {\n              const { id, completed, title } = todo;\n\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  className={classNames({\n                    'has-background-info-light': id === currentTodo?.id,\n                  })}\n                  key={id}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span\n                        className=\"icon\"\n                        data-cy=\"iconCompleted\"\n                      >\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames(\n                        { 'has-text-danger': !completed },\n                        { 'has-text-success': completed },\n                      )}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => {\n                        dispatch(currentTodoActions.setTodo(todo));\n                      }}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames(\n                            { 'far fa-eye-slash': currentTodo?.id === id },\n                            { 'far fa-eye': currentTodo?.id !== id },\n                          )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const onChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const onInputQuery = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(e.target.value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={onChangeStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={onInputQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clear search\"\n              onClick={() => dispatch(filterActions.setQuery(''))}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(loadUser => setUser(loadUser));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href=\"mailto:Sincere@april.biz\">Leanne Graham</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const isSelected = currentTodo !== null;\n\n  useEffect(() => {\n    getTodos()\n      .then(loadTodos => dispatch(todosActions.setTodos(loadTodos)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length ? <TodoList /> : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isSelected && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}